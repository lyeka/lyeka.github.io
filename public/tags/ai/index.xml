<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AI on Lyeka</title>
    <link>http://localhost:1313/tags/ai/</link>
    <description>Recent content in AI on Lyeka</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>augustr2017@163.com (Lyeka)</managingEditor>
    <webMaster>augustr2017@163.com (Lyeka)</webMaster>
    <lastBuildDate>Wed, 01 Oct 2025 00:00:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/ai/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何借助 AI 阅读项目源码</title>
      <link>http://localhost:1313/posts/how_read_source_code/</link>
      <pubDate>Wed, 01 Oct 2025 00:00:00 +0800</pubDate><author>augustr2017@163.com (Lyeka)</author>
      <guid>http://localhost:1313/posts/how_read_source_code/</guid>
      <description>&lt;blockquote class=&#34;my-5 p-4 rounded border-solid border-2 border-foam&#34;&gt;&#xA;  本文以：&lt;a href=&#34;https://github.com/HKUDS/LightRAG&#34;&gt;LightRAG&lt;/a&gt;  项目地址举例说明&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h2 id=&#34;工具与模型&#34;&gt;工具与模型&lt;/h2&gt;&#xA;&lt;p&gt;推荐使用的 IDE/Coding Agent&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Cursor：在 coding 方面可能没有下面的 LLM 厂商的 coding agent 强大，但是支持切换不同模型， codebase rag 索引加速，以及内置渲染 mermaid 在交互上的友好，非常合适阅读源码&lt;/li&gt;&#xA;&lt;li&gt;Claude Code&lt;/li&gt;&#xA;&lt;li&gt;Codex&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;LLM&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;claude-4-sonnet&lt;/li&gt;&#xA;&lt;li&gt;gpt-5&lt;/li&gt;&#xA;&lt;li&gt;gpt-5-codex&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;workflow&#34;&gt;Workflow&lt;/h2&gt;&#xA;&lt;p&gt;遵循下面步骤逐步探索项目&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;技术栈&lt;/li&gt;&#xA;&lt;li&gt;项目结构&lt;/li&gt;&#xA;&lt;li&gt;项目模块文件之间的关系&lt;/li&gt;&#xA;&lt;li&gt;关键数据模型&lt;/li&gt;&#xA;&lt;li&gt;梳理核心流程&lt;/li&gt;&#xA;&lt;li&gt;核心流程深入&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;技术栈&#34;&gt;技术栈&lt;/h3&gt;&#xA;&lt;p&gt;Prompt&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;这个项目使用到了哪些技术栈&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;项目结构&#34;&gt;项目结构&lt;/h3&gt;&#xA;&lt;p&gt;Prompt&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;我想初步全局了解这个项目, 请解释一下项目目录结构，并标注出核心部分&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lightrag/                           ← 【核心包】主要业务逻辑&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── __init__.py                     &lt;span class=&#34;c1&#34;&gt;# 包入口，导出LightRAG和QueryParam&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── lightrag.py                     &lt;span class=&#34;c1&#34;&gt;# ⭐ 核心类LightRAG的实现&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── base.py                         &lt;span class=&#34;c1&#34;&gt;# 基础类和接口定义&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── operate.py                      &lt;span class=&#34;c1&#34;&gt;# 核心操作函数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── prompt.py                       &lt;span class=&#34;c1&#34;&gt;# LLM提示词模板&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── types.py                        &lt;span class=&#34;c1&#34;&gt;# 类型定义&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── utils.py                        &lt;span class=&#34;c1&#34;&gt;# 工具函数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── utils_graph.py                  &lt;span class=&#34;c1&#34;&gt;# 图相关工具&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── rerank.py                       &lt;span class=&#34;c1&#34;&gt;# 重排序模型支持&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── constants.py                    &lt;span class=&#34;c1&#34;&gt;# 常量定义&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── exceptions.py                   &lt;span class=&#34;c1&#34;&gt;# 异常定义&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── namespace.py                    &lt;span class=&#34;c1&#34;&gt;# 命名空间管理&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── kg/                             &lt;span class=&#34;c1&#34;&gt;# ⭐【存储实现】知识图谱存储层&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── json_kv_impl.py            &lt;span class=&#34;c1&#34;&gt;# JSON键值存储（默认）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── neo4j_impl.py              &lt;span class=&#34;c1&#34;&gt;# Neo4j图数据库&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── postgres_impl.py           &lt;span class=&#34;c1&#34;&gt;# PostgreSQL存储&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── redis_impl.py              &lt;span class=&#34;c1&#34;&gt;# Redis存储&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── mongo_impl.py              &lt;span class=&#34;c1&#34;&gt;# MongoDB存储&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── milvus_impl.py             &lt;span class=&#34;c1&#34;&gt;# Milvus向量数据库&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── qdrant_impl.py             &lt;span class=&#34;c1&#34;&gt;# Qdrant向量数据库&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── faiss_impl.py              &lt;span class=&#34;c1&#34;&gt;# Faiss向量存储&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── networkx_impl.py           &lt;span class=&#34;c1&#34;&gt;# NetworkX图存储（默认）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── nano_vector_db_impl.py     &lt;span class=&#34;c1&#34;&gt;# 轻量向量数据库（默认）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── shared_storage.py          &lt;span class=&#34;c1&#34;&gt;# 共享存储接口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── llm/                            &lt;span class=&#34;c1&#34;&gt;# ⭐【LLM适配】大模型集成层&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── openai.py                  &lt;span class=&#34;c1&#34;&gt;# OpenAI模型&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── ollama.py                  &lt;span class=&#34;c1&#34;&gt;# Ollama本地模型&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── gemini.py                  &lt;span class=&#34;c1&#34;&gt;# Google Gemini&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── azure_openai.py            &lt;span class=&#34;c1&#34;&gt;# Azure OpenAI&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── llama_index_impl.py        &lt;span class=&#34;c1&#34;&gt;# LlamaIndex集成&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── api/                            &lt;span class=&#34;c1&#34;&gt;# ⭐【API服务】FastAPI Web服务&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── lightrag_server.py         &lt;span class=&#34;c1&#34;&gt;# 服务器入口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── config.py                  &lt;span class=&#34;c1&#34;&gt;# 配置管理&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── auth.py                    &lt;span class=&#34;c1&#34;&gt;# 认证逻辑&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── routers/                   &lt;span class=&#34;c1&#34;&gt;# API路由&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── webui/                     &lt;span class=&#34;c1&#34;&gt;# 前端Web UI静态资源&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── tools/                          &lt;span class=&#34;c1&#34;&gt;# 辅助工具&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    └── lightrag_visualizer/        &lt;span class=&#34;c1&#34;&gt;# 知识图谱可视化工具&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;关系图谱&#34;&gt;关系图谱&lt;/h3&gt;&#xA;&lt;p&gt;Prompt&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deep Research 项目研究</title>
      <link>http://localhost:1313/posts/deep-research/</link>
      <pubDate>Fri, 26 Sep 2025 18:33:15 +0800</pubDate><author>augustr2017@163.com (Lyeka)</author>
      <guid>http://localhost:1313/posts/deep-research/</guid>
      <description>&lt;p&gt;本文研究 AI 应用领域中的 Deep Research 方向，主要涉及下面三个开源项目&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/langchain-ai/open_deep_research&#34;&gt;LangChain Open Deep Research&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/sentient-agi/ROMA&#34;&gt;ROMA Deep Research&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/Alibaba-NLP/DeepResearch&#34;&gt;Tongyi Deep Research&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;langchain-open-deep-research&#34;&gt;LangChain Open Deep Research&lt;/h2&gt;&#xA; &#xA;&#xA;  &#xA;&#xA;&lt;blockquote class=&#34;my-5 p-4 rounded border-solid border-2 border-foam&#34;&gt;&#xA;  本文分析基于 Git commit b419df8d33b4f39ff5b2a34527bb6b85d0ede5d0 版本&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3 id=&#34;架构&#34;&gt;架构&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/deep_research_read/1.png&#34; alt=&#34;&#34;&gt;&#xA;该项目将 任务划分成了3个阶段&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Scope：明确研究范围&lt;/li&gt;&#xA;&lt;li&gt;Research：核心模块，执行研究任务&lt;/li&gt;&#xA;&lt;li&gt;Write：输出最终报告&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Graph Node&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/deep_research_read/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Research Node&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/deep_research_read/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Scope Phase 包含两个节点：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;clarify_with_user node： 当用户的任务比较模糊，缺失足够的上下文信息时，会和用户确认收集额外信息，以得到一个相对清晰的任务。&lt;/li&gt;&#xA;&lt;li&gt;write_research_brief node： 根据与用户之前的交互（包括问题澄清，在先前的研究报告上进一步探索等）生成一个研究简报。生成简报主要是为了减少噪音，整合上下文，后续的研究过程会在这个简报上进行。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Research Phase 这是一个 multi agent 的实现：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Supervisor Sub Graph：确定研究简报是否可以分解为独立的子主题，并将任务分配给具有独立上下文窗口的子代理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;supervisor node&lt;/li&gt;&#xA;&lt;li&gt;supervisor_tools node：工具节点，包含下面工具&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Think Tool：反思工具，在执行 ConductResearch 前会进行思考现在有了什么信息，还需要哪些信息等，用于规划后续 ConductResearch 行为&lt;/li&gt;&#xA;&lt;li&gt;ConductResearch Tool ：调用 Research Sub-Agents  进行检索与研究，支持并发调以调研不同的 topic&lt;/li&gt;&#xA;&lt;li&gt;ResearchComplete Tool：虚拟工具，作为 Research Phase 终结的条件（除了该工具，还有研究迭代次数限制，无工具调用工具会终止 Research 流程）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Researcher Sub Graph ：根据 supervisor 分配的主题进行研究&#xA;&lt;ul&gt;&#xA;&lt;li&gt;researcher node ：&lt;/li&gt;&#xA;&lt;li&gt;researcher_tools node: 工具节点，包含下面工具&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Think Tool： 和 Supervisor 类似，也有一个 ThinkTool 来规划后续 search 流程&lt;/li&gt;&#xA;&lt;li&gt;Search Tools：搜索工具，内部支持了 TAVILY 搜索， OpenAI 和ANTHROPIC 的 Web Search 功能&lt;/li&gt;&#xA;&lt;li&gt;MCP Tools：支持通过 MCP 协议动态扩展 Researcher 的工具与能力&lt;/li&gt;&#xA;&lt;li&gt;ResearchComplete Tool： 作为 Researcher  终结的条件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;compress_research_node:  当子代理完成任务后，会将收集到的信息进行进一步撰写详细且干净的回答返回给 supervisor&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Write Phase&#xA;&lt;ul&gt;&#xA;&lt;li&gt;final_report_generation node：当 supervisor 收集到足够的信息结束研究任务后，该节点结合研究简报撰写最后输出的报告&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;llm&#34;&gt;LLM&lt;/h3&gt;&#xA;&lt;p&gt;该项目支持了 OpenAI、ANTHROPIC  和 Google 系列的 LLM（也可以扩展使用 Open Router 或者本地模型） ，同时允许在不同的节点配置使用不同的模型去处理任务&#xA;默认配置如下&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
