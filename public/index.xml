<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lyeka</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Lyeka</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <managingEditor>augustr2017@163.com (Lyeka)</managingEditor>
    <webMaster>augustr2017@163.com (Lyeka)</webMaster>
    <lastBuildDate>Wed, 01 Oct 2025 00:00:00 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何借助 AI 阅读项目源码</title>
      <link>http://localhost:1313/posts/how_read_source_code/</link>
      <pubDate>Wed, 01 Oct 2025 00:00:00 +0800</pubDate><author>augustr2017@163.com (Lyeka)</author>
      <guid>http://localhost:1313/posts/how_read_source_code/</guid>
      <description>&lt;h2 id=&#34;工具与模型&#34;&gt;工具与模型&lt;/h2&gt;&#xA;&lt;p&gt;推荐使用的 IDE/Coding Agent&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Cursor：在 coding 方面可能没有下面的 LLM 厂商的 coding agent 强大，但是支持切换不同模型， codebase rag 索引加速，以及内置渲染 mermaid 在交互上的友好，非常合适阅读源码&lt;/li&gt;&#xA;&lt;li&gt;Claude Code&lt;/li&gt;&#xA;&lt;li&gt;Codex&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;LLM&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;claude-4-sonnet&lt;/li&gt;&#xA;&lt;li&gt;gpt-5&lt;/li&gt;&#xA;&lt;li&gt;gpt-5-codex&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;workflow&#34;&gt;Workflow&lt;/h2&gt;&#xA;&lt;p&gt;遵循下面步骤逐步探索项目&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;了解项目结构&lt;/li&gt;&#xA;&lt;li&gt;了解项目文件之间的关系&lt;/li&gt;&#xA;&lt;li&gt;梳理核心流程&lt;/li&gt;&#xA;&lt;li&gt;核心流程深入&lt;/li&gt;&#xA;&lt;li&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;项目结构&#34;&gt;项目结构&lt;/h3&gt;&#xA;&lt;p&gt;Prompt&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;我想初步全局了解这个项目, 请解释一下项目目录结构，并标注出核心部分&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lightrag/                           ← 【核心包】主要业务逻辑&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── __init__.py                     &lt;span class=&#34;c1&#34;&gt;# 包入口，导出LightRAG和QueryParam&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── lightrag.py                     &lt;span class=&#34;c1&#34;&gt;# ⭐ 核心类LightRAG的实现&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── base.py                         &lt;span class=&#34;c1&#34;&gt;# 基础类和接口定义&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── operate.py                      &lt;span class=&#34;c1&#34;&gt;# 核心操作函数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── prompt.py                       &lt;span class=&#34;c1&#34;&gt;# LLM提示词模板&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── types.py                        &lt;span class=&#34;c1&#34;&gt;# 类型定义&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── utils.py                        &lt;span class=&#34;c1&#34;&gt;# 工具函数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── utils_graph.py                  &lt;span class=&#34;c1&#34;&gt;# 图相关工具&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── rerank.py                       &lt;span class=&#34;c1&#34;&gt;# 重排序模型支持&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── constants.py                    &lt;span class=&#34;c1&#34;&gt;# 常量定义&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── exceptions.py                   &lt;span class=&#34;c1&#34;&gt;# 异常定义&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── namespace.py                    &lt;span class=&#34;c1&#34;&gt;# 命名空间管理&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── kg/                             &lt;span class=&#34;c1&#34;&gt;# ⭐【存储实现】知识图谱存储层&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── json_kv_impl.py            &lt;span class=&#34;c1&#34;&gt;# JSON键值存储（默认）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── neo4j_impl.py              &lt;span class=&#34;c1&#34;&gt;# Neo4j图数据库&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── postgres_impl.py           &lt;span class=&#34;c1&#34;&gt;# PostgreSQL存储&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── redis_impl.py              &lt;span class=&#34;c1&#34;&gt;# Redis存储&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── mongo_impl.py              &lt;span class=&#34;c1&#34;&gt;# MongoDB存储&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── milvus_impl.py             &lt;span class=&#34;c1&#34;&gt;# Milvus向量数据库&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── qdrant_impl.py             &lt;span class=&#34;c1&#34;&gt;# Qdrant向量数据库&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── faiss_impl.py              &lt;span class=&#34;c1&#34;&gt;# Faiss向量存储&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── networkx_impl.py           &lt;span class=&#34;c1&#34;&gt;# NetworkX图存储（默认）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── nano_vector_db_impl.py     &lt;span class=&#34;c1&#34;&gt;# 轻量向量数据库（默认）&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── shared_storage.py          &lt;span class=&#34;c1&#34;&gt;# 共享存储接口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── llm/                            &lt;span class=&#34;c1&#34;&gt;# ⭐【LLM适配】大模型集成层&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── openai.py                  &lt;span class=&#34;c1&#34;&gt;# OpenAI模型&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── ollama.py                  &lt;span class=&#34;c1&#34;&gt;# Ollama本地模型&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── gemini.py                  &lt;span class=&#34;c1&#34;&gt;# Google Gemini&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── azure_openai.py            &lt;span class=&#34;c1&#34;&gt;# Azure OpenAI&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── llama_index_impl.py        &lt;span class=&#34;c1&#34;&gt;# LlamaIndex集成&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── api/                            &lt;span class=&#34;c1&#34;&gt;# ⭐【API服务】FastAPI Web服务&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── lightrag_server.py         &lt;span class=&#34;c1&#34;&gt;# 服务器入口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── config.py                  &lt;span class=&#34;c1&#34;&gt;# 配置管理&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── auth.py                    &lt;span class=&#34;c1&#34;&gt;# 认证逻辑&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── routers/                   &lt;span class=&#34;c1&#34;&gt;# API路由&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── webui/                     &lt;span class=&#34;c1&#34;&gt;# 前端Web UI静态资源&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── tools/                          &lt;span class=&#34;c1&#34;&gt;# 辅助工具&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    └── lightrag_visualizer/        &lt;span class=&#34;c1&#34;&gt;# 知识图谱可视化工具&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;关系图谱&#34;&gt;关系图谱&lt;/h3&gt;&#xA;&lt;p&gt;Prompt&lt;/p&gt;</description>
    </item>
    <item>
      <title>Deep Research 项目研究</title>
      <link>http://localhost:1313/posts/deep-research/</link>
      <pubDate>Fri, 26 Sep 2025 18:33:15 +0800</pubDate><author>augustr2017@163.com (Lyeka)</author>
      <guid>http://localhost:1313/posts/deep-research/</guid>
      <description>&lt;p&gt;本文研究 AI 应用领域中的 Deep Research 方向，主要涉及下面三个开源项目&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/langchain-ai/open_deep_research&#34;&gt;LangChain Open Deep Research&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/sentient-agi/ROMA&#34;&gt;ROMA Deep Research&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/Alibaba-NLP/DeepResearch&#34;&gt;Tongyi Deep Research&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;langchain-open-deep-research&#34;&gt;LangChain Open Deep Research&lt;/h2&gt;&#xA; &#xA;&#xA;  &#xA;&#xA;&lt;blockquote class=&#34;my-5 p-4 rounded border-solid border-2 border-foam&#34;&gt;&#xA;  本文分析基于 Git commit b419df8d33b4f39ff5b2a34527bb6b85d0ede5d0 版本&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3 id=&#34;架构&#34;&gt;架构&lt;/h3&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/deep_research_read/1.png&#34; alt=&#34;&#34;&gt;&#xA;该项目将 任务划分成了3个阶段&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Scope：明确研究范围&lt;/li&gt;&#xA;&lt;li&gt;Research：核心模块，执行研究任务&lt;/li&gt;&#xA;&lt;li&gt;Write：输出最终报告&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Graph Node&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/deep_research_read/2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Research Node&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/deep_research_read/3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Scope Phase 包含两个节点：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;clarify_with_user node： 当用户的任务比较模糊，缺失足够的上下文信息时，会和用户确认收集额外信息，以得到一个相对清晰的任务。&lt;/li&gt;&#xA;&lt;li&gt;write_research_brief node： 根据与用户之前的交互（包括问题澄清，在先前的研究报告上进一步探索等）生成一个研究简报。生成简报主要是为了减少噪音，整合上下文，后续的研究过程会在这个简报上进行。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Research Phase 这是一个 multi agent 的实现：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Supervisor Sub Graph：确定研究简报是否可以分解为独立的子主题，并将任务分配给具有独立上下文窗口的子代理&#xA;&lt;ul&gt;&#xA;&lt;li&gt;supervisor node&lt;/li&gt;&#xA;&lt;li&gt;supervisor_tools node：工具节点，包含下面工具&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Think Tool：反思工具，在执行 ConductResearch 前会进行思考现在有了什么信息，还需要哪些信息等，用于规划后续 ConductResearch 行为&lt;/li&gt;&#xA;&lt;li&gt;ConductResearch Tool ：调用 Research Sub-Agents  进行检索与研究，支持并发调以调研不同的 topic&lt;/li&gt;&#xA;&lt;li&gt;ResearchComplete Tool：虚拟工具，作为 Research Phase 终结的条件（除了该工具，还有研究迭代次数限制，无工具调用工具会终止 Research 流程）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Researcher Sub Graph ：根据 supervisor 分配的主题进行研究&#xA;&lt;ul&gt;&#xA;&lt;li&gt;researcher node ：&lt;/li&gt;&#xA;&lt;li&gt;researcher_tools node: 工具节点，包含下面工具&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Think Tool： 和 Supervisor 类似，也有一个 ThinkTool 来规划后续 search 流程&lt;/li&gt;&#xA;&lt;li&gt;Search Tools：搜索工具，内部支持了 TAVILY 搜索， OpenAI 和ANTHROPIC 的 Web Search 功能&lt;/li&gt;&#xA;&lt;li&gt;MCP Tools：支持通过 MCP 协议动态扩展 Researcher 的工具与能力&lt;/li&gt;&#xA;&lt;li&gt;ResearchComplete Tool： 作为 Researcher  终结的条件&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;compress_research_node:  当子代理完成任务后，会将收集到的信息进行进一步撰写详细且干净的回答返回给 supervisor&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Write Phase&#xA;&lt;ul&gt;&#xA;&lt;li&gt;final_report_generation node：当 supervisor 收集到足够的信息结束研究任务后，该节点结合研究简报撰写最后输出的报告&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;llm&#34;&gt;LLM&lt;/h3&gt;&#xA;&lt;p&gt;该项目支持了 OpenAI、ANTHROPIC  和 Google 系列的 LLM（也可以扩展使用 Open Router 或者本地模型） ，同时允许在不同的节点配置使用不同的模型去处理任务&#xA;默认配置如下&lt;/p&gt;</description>
    </item>
    <item>
      <title>Trae Agent 源码阅读</title>
      <link>http://localhost:1313/posts/trae_agent_read/</link>
      <pubDate>Fri, 26 Sep 2025 17:18:14 +0800</pubDate><author>augustr2017@163.com (Lyeka)</author>
      <guid>http://localhost:1313/posts/trae_agent_read/</guid>
      <description>&lt;h2 id=&#34;项目概览&#34;&gt;项目概览&lt;/h2&gt;&#xA; &#xA;&#xA;  &#xA;&#xA;&lt;blockquote class=&#34;my-5 p-4 rounded border-solid border-2 border-foam&#34;&gt;&#xA;  项目地址：&lt;a href=&#34;https://github.com/bytedance/trae-agent&#34;&gt;trae-agent&lt;/a&gt;&#xA;本文分析基于 Git commit 2cb657823bc5f9bdf276a69d2bcdd60ec389de46 版本&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;p&gt;Trae agent 是字节开源的 LLM Agent，用于解决通用软件领域问题。项目包含了 UI (CLI) 和 Agent 部分，本文着重研究核心的  Agent 部分。&lt;/p&gt;&#xA;&lt;h3 id=&#34;目录结构&#34;&gt;目录结构&lt;/h3&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;trae-agent/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── trae_agent/                       &lt;span class=&#34;c1&#34;&gt;# 核心包目录&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── agent/                        &lt;span class=&#34;c1&#34;&gt;# Agent核心逻辑&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── agent_basics.py           &lt;span class=&#34;c1&#34;&gt;# 基础数据结构 (AgentState, AgentStep)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── base_agent.py             &lt;span class=&#34;c1&#34;&gt;# 抽象基类 (ReAct循环逻辑)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── trae_agent.py             &lt;span class=&#34;c1&#34;&gt;# 具体实现 (软件工程专用)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── agent.py                  &lt;span class=&#34;c1&#34;&gt;# 包装器 (外观模式)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   └── docker_manager.py         &lt;span class=&#34;c1&#34;&gt;# Docker环境管理&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── tools/                        &lt;span class=&#34;c1&#34;&gt;# 工具集合&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── base.py                   &lt;span class=&#34;c1&#34;&gt;# 工具基类和接口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── bash_tool.py              &lt;span class=&#34;c1&#34;&gt;# Shell命令执行&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── edit_tool.py              &lt;span class=&#34;c1&#34;&gt;# 文件编辑工具&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── json_edit_tool.py         &lt;span class=&#34;c1&#34;&gt;# JSON编辑工具&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── task_done_tool.py         &lt;span class=&#34;c1&#34;&gt;# 任务完成工具&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── sequential_thinking_tool.py &lt;span class=&#34;c1&#34;&gt;# 结构化思考&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── mcp_tool.py               &lt;span class=&#34;c1&#34;&gt;# MCP协议工具&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   └── ckg/                      &lt;span class=&#34;c1&#34;&gt;# 代码知识图谱&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── utils/                        &lt;span class=&#34;c1&#34;&gt;# 工具类模块&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── llm_clients/              &lt;span class=&#34;c1&#34;&gt;# LLM客户端&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   ├── llm_client.py         &lt;span class=&#34;c1&#34;&gt;# 统一客户端接口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   ├── anthropic_client.py   &lt;span class=&#34;c1&#34;&gt;# Claude集成&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   ├── openai_client.py      &lt;span class=&#34;c1&#34;&gt;# GPT集成&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   ├── google_client.py      &lt;span class=&#34;c1&#34;&gt;# Gemini集成&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   └── ...                   &lt;span class=&#34;c1&#34;&gt;# 其他LLM提供商&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── cli/                      &lt;span class=&#34;c1&#34;&gt;# 命令行界面&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   ├── console_factory.py    &lt;span class=&#34;c1&#34;&gt;# 控制台工厂&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   ├── simple_console.py     &lt;span class=&#34;c1&#34;&gt;# 简单文本界面&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   └── rich_console.py       &lt;span class=&#34;c1&#34;&gt;# 富文本界面&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── config.py                 &lt;span class=&#34;c1&#34;&gt;# 配置管理&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── trajectory_recorder.py    &lt;span class=&#34;c1&#34;&gt;# 轨迹记录&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   └── mcp_client.py             &lt;span class=&#34;c1&#34;&gt;# MCP协议客户端&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── prompt/                       &lt;span class=&#34;c1&#34;&gt;# 提示词管理&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   └── agent_prompt.py           &lt;span class=&#34;c1&#34;&gt;# Agent提示词&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── cli.py                        &lt;span class=&#34;c1&#34;&gt;# 命令行入口&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── dist/                         &lt;span class=&#34;c1&#34;&gt;# 分发工具&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── evaluation/                       &lt;span class=&#34;c1&#34;&gt;# 评估框架&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── run_evaluation.py             &lt;span class=&#34;c1&#34;&gt;# SWE-bench评估脚本&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── utils.py                      &lt;span class=&#34;c1&#34;&gt;# 评估工具函数&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── patch_selection/              &lt;span class=&#34;c1&#34;&gt;# 补丁选择评估&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── tests/                            &lt;span class=&#34;c1&#34;&gt;# 测试套件&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── agent/                        &lt;span class=&#34;c1&#34;&gt;# Agent测试&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── tools/                        &lt;span class=&#34;c1&#34;&gt;# 工具测试&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── utils/                        &lt;span class=&#34;c1&#34;&gt;# 工具类测试&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── docs/                             &lt;span class=&#34;c1&#34;&gt;# 文档&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── tools.md                      &lt;span class=&#34;c1&#34;&gt;# 工具文档&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── TRAJECTORY_RECORDING.md       &lt;span class=&#34;c1&#34;&gt;# 轨迹记录文档&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── server/                           &lt;span class=&#34;c1&#34;&gt;# FastAPI服务端 (可选)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── pyproject.toml                    &lt;span class=&#34;c1&#34;&gt;# Python项目配置&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── trae_config.yaml.example          &lt;span class=&#34;c1&#34;&gt;# 配置模板&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── README.md                         &lt;span class=&#34;c1&#34;&gt;# 项目说明&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;关系图谱&#34;&gt;关系图谱&lt;/h3&gt;&#xA;&lt;pre class=&#34;mermaid&#34;&gt;&#xA;    graph TB&#xA;    %% 外部接口层&#xA;    CLI[CLI Interface&amp;lt;br/&amp;gt;trae_agent/cli.py] --&amp;gt; Agent[Agent&amp;lt;br/&amp;gt;trae_agent/agent/agent.py]&#xA;    Server[FastAPI Server&amp;lt;br/&amp;gt;server/] --&amp;gt; Agent&#xA;    &#xA;    %% 代理层&#xA;    Agent --&amp;gt; TraeAgent[TraeAgent&amp;lt;br/&amp;gt;trae_agent/agent/trae_agent.py]&#xA;    Agent --&amp;gt; BaseAgent[BaseAgent&amp;lt;br/&amp;gt;trae_agent/agent/base_agent.py]&#xA;    TraeAgent -.-&amp;gt; BaseAgent&#xA;    &#xA;    %% 配置层&#xA;    Config[Configuration&amp;lt;br/&amp;gt;trae_agent/utils/config.py] --&amp;gt; Agent&#xA;    Config --&amp;gt; TraeAgent&#xA;    &#xA;    %% LLM 客户端层&#xA;    BaseAgent --&amp;gt; LLMClient[LLM Client&amp;lt;br/&amp;gt;trae_agent/utils/llm_clients/]&#xA;    LLMClient --&amp;gt; Anthropic[anthropic_client.py]&#xA;    LLMClient --&amp;gt; OpenAI[openai_client.py]&#xA;    LLMClient --&amp;gt; Google[google_client.py]&#xA;    LLMClient --&amp;gt; Ollama[ollama_client.py]&#xA;    LLMClient --&amp;gt; Azure[azure_client.py]&#xA;    LLMClient --&amp;gt; Doubao[doubao_client.py]&#xA;    LLMClient --&amp;gt; OpenRouter[openrouter_client.py]&#xA;    &#xA;    %% 工具执行层&#xA;    BaseAgent --&amp;gt; ToolExecutor[Tool Executor&amp;lt;br/&amp;gt;trae_agent/tools/base.py]&#xA;    BaseAgent --&amp;gt; DockerToolExecutor[Docker Tool Executor&amp;lt;br/&amp;gt;trae_agent/tools/docker_tool_executor.py]&#xA;    &#xA;    ToolExecutor --&amp;gt; ToolRegistry[Tools Registry&amp;lt;br/&amp;gt;trae_agent/tools/__init__.py]&#xA;    DockerToolExecutor --&amp;gt; ToolRegistry&#xA;    &#xA;    %% 工具实现层&#xA;    ToolRegistry --&amp;gt; BashTool[Bash Tool]&#xA;    ToolRegistry --&amp;gt; EditTool[Text Editor Tool]&#xA;    ToolRegistry --&amp;gt; JSONEditTool[JSON Edit Tool]&#xA;    ToolRegistry --&amp;gt; ThinkingTool[Sequential Thinking Tool]&#xA;    ToolRegistry --&amp;gt; TaskDoneTool[Task Done Tool]&#xA;    ToolRegistry --&amp;gt; CKGTool[Code Knowledge Graph Tool]&#xA;    &#xA;    %% MCP 工具层&#xA;    TraeAgent --&amp;gt; MCPClient[MCP Client&amp;lt;br/&amp;gt;trae_agent/utils/mcp_client.py]&#xA;    MCPClient --&amp;gt; MCPTool[MCP Tools&amp;lt;br/&amp;gt;trae_agent/tools/mcp_tool.py]&#xA;    &#xA;    %% Docker 管理层&#xA;    BaseAgent --&amp;gt; DockerManager[Docker Manager&amp;lt;br/&amp;gt;trae_agent/agent/docker_manager.py]&#xA;    &#xA;    %% 控制台层&#xA;    Agent --&amp;gt; CLIConsole[CLI Console&amp;lt;br/&amp;gt;trae_agent/utils/cli/]&#xA;    CLIConsole --&amp;gt; SimpleConsole[Simple Console]&#xA;    CLIConsole --&amp;gt; RichConsole[Rich Console]&#xA;    &#xA;    %% 轨迹记录层&#xA;    Agent --&amp;gt; TrajectoryRecorder[Trajectory Recorder&amp;lt;br/&amp;gt;trae_agent/utils/trajectory_recorder.py]&#xA;    &#xA;    %% 提示层&#xA;    TraeAgent --&amp;gt; SystemPrompt[System Prompt&amp;lt;br/&amp;gt;trae_agent/prompt/agent_prompt.py]&#xA;    &#xA;    %% 评估层&#xA;    Evaluation[Evaluation&amp;lt;br/&amp;gt;evaluation/] --&amp;gt; Agent&#xA;    Evaluation --&amp;gt; SWEBench[SWE-bench]&#xA;    Evaluation --&amp;gt; SWEBenchLive[SWE-bench-Live]&#xA;    Evaluation --&amp;gt; MultiSWEBench[Multi-SWE-bench]&#xA;    &#xA;    %% 测试层&#xA;    Tests[Tests&amp;lt;br/&amp;gt;tests/] -.-&amp;gt; Agent&#xA;    Tests -.-&amp;gt; ToolRegistry&#xA;    Tests -.-&amp;gt; Config&#xA;    &#xA;    %% 样式定义&#xA;    classDef interface fill:#e1f5fe,stroke:#01579b,stroke-width:2px&#xA;    classDef core fill:#f3e5f5,stroke:#4a148c,stroke-width:2px&#xA;    classDef tools fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px&#xA;    classDef llm fill:#fff3e0,stroke:#e65100,stroke-width:2px&#xA;    classDef utils fill:#f1f8e9,stroke:#33691e,stroke-width:2px&#xA;    classDef eval fill:#fce4ec,stroke:#880e4f,stroke-width:2px&#xA;    &#xA;    class CLI,Server interface&#xA;    class Agent,TraeAgent,BaseAgent core&#xA;    class ToolExecutor,DockerToolExecutor,ToolRegistry,BashTool,EditTool,JSONEditTool,ThinkingTool,TaskDoneTool,CKGTool,MCPTool tools&#xA;    class LLMClient,Anthropic,OpenAI,Google,Ollama,Azure,Doubao,OpenRouter llm&#xA;    class Config,CLIConsole,TrajectoryRecorder,DockerManager,MCPClient,SystemPrompt utils&#xA;    class Evaluation,SWEBench,SWEBenchLive,MultiSWEBench,Tests eval&#xA;  &lt;/pre&gt;&#xA;  &lt;h2 id=&#34;核心流程&#34;&gt;核心流程&lt;/h2&gt;&#xA;&lt;pre class=&#34;mermaid&#34;&gt;&#xA;    sequenceDiagram&#xA;    participant CLI&#xA;    participant Agent&#xA;    participant TraeAgent&#xA;    participant LLMClient&#xA;    participant ToolExecutor&#xA;    participant CLIConsole&#xA;    participant TrajectoryRecorder&#xA;&#xA;    Note over CLI,TrajectoryRecorder: 1. 初始化阶段&#xA;    CLI-&amp;gt;&amp;gt;Agent: create(agent_type, config, console)&#xA;    Agent-&amp;gt;&amp;gt;TraeAgent: new TraeAgent(config)&#xA;    Agent-&amp;gt;&amp;gt;CLIConsole: set_cli_console()&#xA;    Agent-&amp;gt;&amp;gt;TrajectoryRecorder: set_trajectory_recorder()&#xA;&#xA;    Note over CLI,TrajectoryRecorder: 2. 任务启动&#xA;    CLI-&amp;gt;&amp;gt;Agent: run(task, task_args)&#xA;    Agent-&amp;gt;&amp;gt;TraeAgent: new_task(task, extra_args)&#xA;    TraeAgent-&amp;gt;&amp;gt;TraeAgent: setup initial messages&#xA;    TraeAgent-&amp;gt;&amp;gt;TrajectoryRecorder: start_recording()&#xA;&#xA;    alt MCP 工具需要初始化&#xA;        Agent-&amp;gt;&amp;gt;TraeAgent: initialise_mcp()&#xA;        TraeAgent-&amp;gt;&amp;gt;TraeAgent: discover_mcp_tools()&#xA;    end&#xA;&#xA;    Agent-&amp;gt;&amp;gt;CLIConsole: print_task_details()&#xA;    &#xA;    par 并行启动&#xA;        Agent-&amp;gt;&amp;gt;CLIConsole: start() [异步任务]&#xA;    and&#xA;        Agent-&amp;gt;&amp;gt;TraeAgent: execute_task()&#xA;    end&#xA;&#xA;    Note over CLI,TrajectoryRecorder: 3. 主执行循环&#xA;    loop 最多 max_steps 次&#xA;        TraeAgent-&amp;gt;&amp;gt;CLIConsole: update_status(THINKING)&#xA;        TraeAgent-&amp;gt;&amp;gt;LLMClient: chat(messages, tools)&#xA;        LLMClient--&amp;gt;&amp;gt;TraeAgent: llm_response&#xA;        TraeAgent-&amp;gt;&amp;gt;CLIConsole: update_status(response)&#xA;&#xA;        alt LLM 说任务完成&#xA;            TraeAgent-&amp;gt;&amp;gt;TraeAgent: llm_indicates_task_completed()&#xA;            alt 真正完成&#xA;                TraeAgent-&amp;gt;&amp;gt;TraeAgent: _is_task_completed()&#xA;                TraeAgent-&amp;gt;&amp;gt;TraeAgent: set COMPLETED state&#xA;                Note over TraeAgent: 跳出循环&#xA;            else 实际未完成&#xA;                TraeAgent-&amp;gt;&amp;gt;TraeAgent: task_incomplete_message()&#xA;                Note over TraeAgent: 继续循环&#xA;            end&#xA;        else LLM 要执行工具&#xA;            TraeAgent-&amp;gt;&amp;gt;CLIConsole: update_status(CALLING_TOOL)&#xA;            alt 并行工具调用&#xA;                TraeAgent-&amp;gt;&amp;gt;ToolExecutor: parallel_tool_call()&#xA;            else 串行工具调用&#xA;                TraeAgent-&amp;gt;&amp;gt;ToolExecutor: sequential_tool_call()&#xA;            end&#xA;            ToolExecutor--&amp;gt;&amp;gt;TraeAgent: tool_results&#xA;            TraeAgent-&amp;gt;&amp;gt;CLIConsole: update_status(tool_results)&#xA;            &#xA;            opt 需要反思&#xA;                TraeAgent-&amp;gt;&amp;gt;TraeAgent: reflect_on_result()&#xA;                TraeAgent-&amp;gt;&amp;gt;CLIConsole: update_status(REFLECTING)&#xA;            end&#xA;        end&#xA;&#xA;        TraeAgent-&amp;gt;&amp;gt;TrajectoryRecorder: record_agent_step()&#xA;        TraeAgent-&amp;gt;&amp;gt;CLIConsole: update_status(COMPLETED step)&#xA;    end&#xA;&#xA;    Note over CLI,TrajectoryRecorder: 4. 清理阶段&#xA;    TraeAgent-&amp;gt;&amp;gt;ToolExecutor: close_tools()&#xA;    TraeAgent-&amp;gt;&amp;gt;TraeAgent: cleanup_mcp_clients()&#xA;    TraeAgent--&amp;gt;&amp;gt;Agent: execution_result&#xA;    Agent-&amp;gt;&amp;gt;CLIConsole: 等待控制台任务完成&#xA;    Agent--&amp;gt;&amp;gt;CLI: 返回执行结果&#xA;    CLI-&amp;gt;&amp;gt;CLI: 显示轨迹文件路径&#xA;  &lt;/pre&gt;&#xA;  &lt;p&gt;Trae Agent 整体设计上采用了 ReAct 模式，当创建 Agent 实例并初始化资源后，开始在循环中执行任务，交替执行 LLM 推理、工具执行，失败反思步骤，直到任务完成。&#xA;任务的完成分为两步，一是解析 LLM 的 Response 中是否有任务结束标识（ 是否包含 &lt;code&gt;task_done&lt;/code&gt; 等关键字），二是当必须有代码变更时，检查是否有除了 test 文件之外的的改动（目前看起来只有 SWE Bench 评估才有这个 &lt;code&gt;_is_task_completed&lt;/code&gt; 流程）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>About Me</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>augustr2017@163.com (Lyeka)</author>
      <guid>http://localhost:1313/about/</guid>
      <description>&lt;p&gt;Hi, my name is Lyeka&lt;/p&gt;</description>
    </item>
    <item>
      <title>Read</title>
      <link>http://localhost:1313/reading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><author>augustr2017@163.com (Lyeka)</author>
      <guid>http://localhost:1313/reading/</guid>
      <description>&lt;h2 id=&#34;2025&#34;&gt;2025&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 以交易为生&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 你一生的故事&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 穷查理宝典&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 专业投机原理&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 海龟交易法则&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 消失的十三级台阶&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 克莱因壶&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
